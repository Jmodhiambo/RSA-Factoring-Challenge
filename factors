#!/usr/bin/python3
"""
Module factors
This module factorizes a number to try to decrypt it.
Functions:
    def pollards_rho(n)
    def main()
"""
import sys
import random
import math


def pollards_rho(n):
    """Uses Pollard's Rho algorithm to find a non-trivial factor of n"""
    if n % 2 == 0:
        return 2
    x = random.randint(2, n-1)
    y = x
    c = random.randint(1, n-1)
    d = 1

    while d == 1:
        x = (x * x + c) % n
        y = (y * y + c) % n
        y = (y * y + c) % n
        d = math.gcd(abs(x - y), n)

        if d == n:
            return pollards_rho(n)
    
    return d


def factorize(num):
    """Factorizes a given large number using Pollard's Rho"""
    if num <= 1:
        return
    if num % 2 == 0:
        print(f"{num}=2*{num//2}")
        return
    factor = pollards_rho(num)
    print(f"{num}={factor}*{num // factor}")


def main():
    """Factorizes a number from a file provided as a command-line argument"""
    if len(sys.argv) != 2:
        print("Usage: ./factors <file>")
        sys.exit(1)

    try:
        file_name = sys.argv[1]
        with open(file_name, "r") as file:
            for line in file:
                num_str = line.strip()
                if num_str:  # Ensure the line is not empty
                    try:
                        num = int(num_str)
                        factorize(num)
                    except ValueError:
                        print(f"Invalid number: {num_str}")
    except FileNotFoundError:
        print(f"File {file_name} was not found.")
    except Exception as err:
        print(f"Error: {err}")


if __name__ == "__main__":
    main()
